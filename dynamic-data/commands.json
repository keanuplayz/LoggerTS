{
    "util": {
        "unknown-command": {
            "description": "This command is run if you type a command the bot cannot understand.",
            "format": "Unknown command. Use `%(prefix) help` to view the command list."
        }
    },
    "commands": {
    },
    "general": {
    },
    "formatter": {
        "help-syntax": {
            "description": "Information about the formatter system",
            "format": "**Format Syntax**\n\nThe formatter has a few rules.\n`%/%/` outside of any invocation are repeated verbatim and will ignore `%%` and `%/` until the next space. This is for URL compatibility.\n`%%` will cause the next character to ignore these rules, except `(` outside of an invocation. This rule overrides any later rule, and can override the previous rule if the start gets escaped.\n`%%(` will begin an invocation, space separates arguments within an invocation, `)` ends it, and invocations can nest with further `()` - without the `%%`.\n`/ABC/` is equivalent to `%%(emote ABC)` outside of lists and anything between `%/%/` and a space, for the sake of URLs.\nPrefixing a value with `'` wraps it as so: `(%%' value)`\nIt is important to note that it *does* work to put invocations in a list, as so: `%%((thing1) (thing2))`; the result of the last invocation will be returned.\nThis can be used to silence invocations.\nFinally, double-quotes (\") around some text escapes everything except other double-quotes.\n\nFor further details, please see the other commands in the -formatter group."
        },
        "help-execution": {
            "description": "About invocation execution and recursion",
            "format": "**Invocation execution and recursion**\n\nInvocations generally evaluate their parameters as invocations. (There are some exceptions.)\nAn invocation that is a string is returned as-is, but lists are evaluated.\nInvocations may thus be nested, such as `(name (cause))`.\nIn the case of random-element, for example, you may not want this; see the ' invocation for a way around this."
        },
        "help-types": {
            "description": "About types & the 'number?' invocation",
            "format": "**Types**\n\nThe formatter has two types, strings and lists.\nNumbers are strings that are then strictly checked to be safe integers with no additional padding.\nThe 'number?' invocation checks to see if a value is a valid number."
        },
        "help-booleans": {
            "description": "About booleans and the not invocation",
            "format": "**Booleans**\n\nFalse is an empty string. Anything else is true.\nHowever, if true needs to be returned by a library function, it will be returned as 'true'.\nThe not invocation is equivalent to `(if A \"\" \"true\")` where A is the parameter; that is, it returns the boolean opposite of the input."
        },

        "help-'": {
            "description": "The ' invocation",
            "format": "**The ' invocation**\n\nThe ' invocation uses a special prefix syntax, where `'1` is equivalent to `(%%' 1)`. It has a single parameter.\nThe parameter is returned as-is - *without evaluation*.\nExample: `%%(random-element '(1 2 3))` -> `1` or `2` or `3`"
        },
        "help-list": {
            "description": "The 'list' invocation",
            "format": "**The 'list' invocation**\n\nThe 'list' invocation has an arbitrary amount of parameters. It returns a list containing them all in order after evaluation."
        },
        "help-length": {
            "description": "The 'length' invocation",
            "format": "**The 'length' invocation**\n\nThe 'length' invocation takes a single parameter and returns its length."
        },
        "help-nth": {
            "description": "The 'nth' invocation",
            "format": "**The 'nth' invocation**\n\nThe 'nth' invocation takes two parameters: an index and a list.\nIt returns a value from the given index of the list; these indexes begin at 0.\nExample: `%%(nth 0 '(3 2 1))` -> `3`"
        },
        "help-comparison": {
            "description": "The comparison invocations (<=, >=, <, >, ==, !=)",
            "format": "**The comparison invocations**\n\n<=, >=, <, > take two parameters, which are numbers, perform a comparison, and return the result.\n== and != work on strings, too."
        },
        "help-maths": {
            "description": "The maths invocations (+, -, \\*)",
            "format": "**The maths invocations**\n\n+ and \\* take an arbitrary amount of numeric parameters, and add%/multiply them together respectively.\nGiven no input, + will return 0 and \\* will return 1.\n- meanwhile requires 2 numeric parameters, subtracting the second from the first and returning the result."
        },
        "help-random-element": {
            "description": "The 'random-element' invocation",
            "format": "**The 'random-element' invocation**\n\nThe 'random-element' invocation takes a single parameter, which is a list of possible outputs.\nIt returns one, unless this doesn't make sense, in which case it will return whatever it likes.\nExample: See the ' invocation."
        },
        "help-random": {
            "description": "The 'random' invocation",
            "format": "**The 'random' invocation**\n\nThe 'random' invocation takes a single parameter, which is the number of possible results, and returns a number from 0 to that number - 1.\nIf the input is less than 0, expect shenanigans."
        },
        "help-strcat": {
            "description": "The 'strcat' invocation",
            "format": "**The 'strcat' invocation**\n\nThe 'strcat' invocation concatenates all the parameters given, which must be strings, returning the result."
        },

        "help-if": {
            "description": "The 'if' invocation",
            "format": "**The 'if' invocation**\n\nThe 'if' invocation takes two to three parameters.\nIt will only run & return the result of the second if the first is true, and will run & return the result of the third (if present) otherwise."
        },
        "help-set": {
            "description": "The 'set' invocation",
            "format": "**The 'set' invocation**\n\nThe 'set' invocation takes two parameters: a string for an invocation name, and some arbitrary value.\nIt creates a new invocation type at the relevant scope that simply returns the given value."
        },
        "help-set-func": {
            "description": "The 'set-func' invocation",
            "format": "**The 'set-func' invocation**\n\nThe 'set-func' invocation never ever evaluates its parameters.\nThe first parameter can be a string or a list.\nIf it's a string, the second parameter must also be a string, and set-func copies the function referred to by the second parameter to the first.\nIf the first parameter is not a string, it must be a list of the form (name arg1 arg2 arg3) or such.\nThere may be as many or as few arguments as you want, but the name must always be present and a string.\nThe second parameter is code to run in the function that will be created with the given name and parameters.\nThe parameters are evaluated and copied to local variables in a new scope (inside the scope where set-func was run) before your code is run.\nCombined with the `bootstrap` user setting, this allows you to create simple macros."
        },
        "help-emote": {
            "description": "The 'emote' invocation",
            "format": "**The 'emote' invocation**\n\nThe 'emote' invocation has a single parameter: The reference used to get the emote.\nThis can be at least an emote ID, emote name, or the actual emote in written form.\nIt is subject to per-guild overrides.\nExample: `%%(emote leaCheese)` -> `%(emote leaCheese)`"
        },
        "help-quote": {
            "description": "The 'quote', 'quote-cause', 'quote-silent', 'quote-silent-cause' invocations",
            "format": "**The 'quote', 'quote-cause', 'quote-silent', 'quote-silent-cause' invocations**\n\nThe 'quote' invocation receives a Discord message URL (or simply a channel ID followed by a message ID, separated by %/), and regurgitates it as a quotation.\nThis will fail if the Writer (for guild settings, this means 'the guild') doesn't have access.\nExample: `%%(quote https://discordapp.com/channels/143364538958348288/367424200991965184/604035298686402770)`\nAdditional note: 'quote-cause' is this but has stricter permissions checks, so the Cause must *also* have access.\nAdditional additional note: 'quote-silent' avoids pinging the original message author.\nAdditional additional additional note: 'quote-silent-cause' combines these."
        },
        "help-prefix": {
            "description": "The 'prefix' invocation",
            "format": "**The 'prefix' invocation**\n\nThe 'prefix' invocation returns the relevant bot prefix."
        },
        "help-cause": {
            "description": "The 'cause' invocation",
            "format": "**The 'cause' invocation**\n\nThe 'cause' invocation returns the user ID of the user who 'caused' the execution to take place."
        },
        "help-name": {
            "description": "The 'name' invocation",
            "format": "**The 'name' invocation**\n\nThe 'name' invocation takes a single parameter, the user ID to name.\nIt returns the local name of that user.\nFor safety reasons, the user must be a member of the relevant guild, or this will simply return their ID as-is."
        },
        "help-find-user": {
            "description": "The 'find-user' invocation",
            "format": "**The 'find-user' invocation**\n\nThe 'find-user' invocation takes a single parameter, a string representing that user.\nIt will return the user ID as a string, or false otherwise."
        },
        "help-args": {
            "description": "The 'args' invocation",
            "format": "**The 'args' invocation**\n\nThe 'args' invocation has no parameters, and returns the list of command arguments if relevant."
        },
        "help-embed": {
            "description": "The 'embed' invocation",
            "format": "**The 'embed' invocation**\n\nThe 'embed' invocation has one parameter: the embed description.\nDescriptions of valid embed descriptions will be shown via examples.\nDeleting an existing embed: `%%(embed \"\")`\nExample Image (note the ' - the embed details may come from other invocations):\n`%%(embed '(image \"CrossCode Stream Drawing; see https://discordapp.com/channels/143364538958348288/461638004490895390/602281244977528832\" \"https://lh6.googleusercontent.com/uUAgjHNYZu7IWdIaV_WtDafdo6vqpJsam63_XxvN4d3107yMlESv2XTHQuWFoENLUCFQuCtmNLbq_A=w1366-h679\"))`"
        }
    }
}
